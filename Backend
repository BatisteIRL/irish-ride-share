const { Expo } = require('expo-server-sdk');

const expo = new Expo();

// ... (previous code remains the same)

// Add a new field to the User schema
const UserSchema = new mongoose.Schema({
  // ... (previous fields remain the same)
  expoPushToken: String,
});

// ... (previous route definitions remain the same)

app.post('/api/users/push-token', authenticateJWT, async (req, res) => {
  try {
    const { expoPushToken } = req.body;
    await User.findByIdAndUpdate(req.user.id, { expoPushToken });
    res.sendStatus(200);
  } catch (error) {
    res.status(500).send({ message: 'Error updating push token' });
  }
});

// Function to send push notification
async function sendPushNotification(userId, title, body) {
  try {
    const user = await User.findById(userId);
    if (!user || !user.expoPushToken) return;

    const message = {
      to: user.expoPushToken,
      sound: 'default',
      title,
      body,
    };

    await expo.sendPushNotificationsAsync([message]);
  } catch (error) {
    console.error('Error sending push notification:', error);
  }
}

// Update the booking route to send a notification
app.post('/api/rides/:id/book', authenticateJWT, async (req, res) => {
  try {
    const ride = await Ride.findById(req.params.id);
    if (!ride || ride.availableSeats === 0) {
      return res.status(400).send({ message: 'Ride not available' });
    }
    ride.passengers.push(req.user.id);
    ride.availableSeats--;
    await ride.save();
    
    // Send push notification to the driver
    await sendPushNotification(
      ride.driverId,
      'New Booking',
      `A new passenger has booked your ride from ${ride.from} to ${ride.to}`
    );
    
    // Emit event to driver
    io.to(ride.driverId.toString()).emit('rideBooked', { rideId: ride._id, passengerId: req.user.id });
    
    res.json(ride);
  } catch (error) {
    res.status(500).send({ message: 'Error booking ride' });
  }
});

// ... (rest of the server code remains the same)
